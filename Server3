#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>

#define PORT 8484
#define BUFFER_SIZE 1024

void handle_client(int clientSocket) {
    char buffer[BUFFER_SIZE];
    ssize_t bytesRead;
    time_t currentTime;
    struct tm *timeInfo;
    char dateTimeString[BUFFER_SIZE];

    // Receive data from client
    bytesRead = read(clientSocket, buffer, BUFFER_SIZE);
    if (bytesRead < 0) {
        perror("Failed to read from socket");
        close(clientSocket);
        exit(EXIT_FAILURE);
    }

    // Get current date and time
    currentTime = time(NULL);
    timeInfo = localtime(&currentTime);
    strftime(dateTimeString, BUFFER_SIZE, "text from client received at %d %B %Y, %H:%M", timeInfo);

    // Combine text from client with server's current date and time
    strcat(dateTimeString, " ");
    strncat(dateTimeString, buffer, bytesRead);

    // Send response to client
    ssize_t bytesSent = write(clientSocket, dateTimeString, strlen(dateTimeString));
    if (bytesSent < 0) {
        perror("Failed to write to socket");
        close(clientSocket);
        exit(EXIT_FAILURE);
    }

    // Close client socket
    close(clientSocket);
}

int main() {
    int serverSocket, clientSocket;
    struct sockaddr_in serverAddress, clientAddress;
    socklen_t clientAddressLength;

    // Create socket
    serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSocket < 0) {
        perror("Failed to create socket");
        exit(EXIT_FAILURE);
    }

    // Bind socket to a specific IP address and port
    serverAddress.sin_family = AF_INET;
    serverAddress.sin_addr.s_addr = INADDR_ANY;
    serverAddress.sin_port = htons(PORT);

    if (bind(serverSocket, (struct sockaddr *)&serverAddress, sizeof(serverAddress)) < 0) {
        perror("Failed to bind socket");
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(serverSocket, 3) < 0) {
        perror("Failed to listen for connections");
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d\n", PORT);

    while (1) {
        // Accept incoming connections
        clientAddressLength = sizeof(clientAddress);
        clientSocket = accept(serverSocket, (struct sockaddr *)&clientAddress, &clientAddressLength);
        if (clientSocket < 0) {
            perror("Failed to accept client connection");
            continue;
        }

        printf("Client connected\n");

        // Handle client
        handle_client(clientSocket);
    }

    // Close server socket
    close(serverSocket);

    return 0;
}
